import { Component, ElementRef, ViewChild, AfterViewInit } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

interface CustomMediaTrackConstraintSet extends MediaTrackConstraintSet {
  zoom?: number;
}

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet, FormsModule, CommonModule],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent implements AfterViewInit {
  @ViewChild('videoElement', { static: false }) videoElement!: ElementRef;
  stream: MediaStream | null = null;
  zoomLevel = 1;
  maxZoom = 3;
  minZoom = 1;
  zoomStep = 0.1;

  ngAfterViewInit() {
    setTimeout(() => {
      console.log("üì∑ Video element:", this.videoElement);
      if (!this.videoElement) {
        console.error("‚ùå `videoElement` Êú™ÊâæÂà∞ÔºåË´ãÁ¢∫‰øù HTML Ê≠£Á¢∫ÔºÅ");
        return;
      }
      this.startCamera();
    }, 500);
  }

  async startCamera() {
    try {
      if (!this.videoElement || !this.videoElement.nativeElement) {
        console.error('‚ùå `videoElement` ÁÇ∫ nullÔºåË´ãÊ™¢Êü• HTML ÊòØÂê¶Ê≠£Á¢∫ÔºÅ');
        alert('‚ö†Ô∏è Ë´ãÁ¢∫‰øùÁ∂≤Á´ôÂú® HTTPS ‰∏ãÈÅãË°åÔºå‰∏¶ÂÖÅË®±Áõ∏Ê©üÊ¨äÈôêÔºÅ');
        return;
      }

      // ‚úÖ Á¢∫‰øù‰ΩøÁî® HTTPSÔºåÂê¶ÂâáÊèêÈÜíÁî®Êà∂
      if (location.protocol !== 'https:') {
        alert("‚ö†Ô∏è Ë´ã‰ΩøÁî® HTTPS ‰ª•ÂïüÂãïÁõ∏Ê©üÂäüËÉΩÔºÅ");
        return;
      }

      this.stream = await navigator.mediaDevices.getUserMedia({
        video: { facingMode: 'environment' } // ‰ΩøÁî®ÂæåÈè°È†≠
      });

      const video: HTMLVideoElement = this.videoElement.nativeElement;
      video.srcObject = this.stream;
      video.play();

      // ‚úÖ Á¢∫Ë™çË£ùÁΩÆÊòØÂê¶ÊîØÊè¥ËÆäÁÑ¶
      const track = this.stream.getVideoTracks()[0];
      const capabilities = track.getCapabilities() as any; // ËÆì TypeScript ÂøΩÁï•È°ûÂûãÊ™¢Êü•
      console.log("üì∑ Camera capabilities:", capabilities);

      if (capabilities.zoom) {
        this.zoomLevel = capabilities.zoom.min || 1;
        this.minZoom = capabilities.zoom.min || 1;
        this.maxZoom = capabilities.zoom.max || 3;
      } else {
        console.warn('‚ùå Zoom is not supported on this device.');
      }
    } catch (err) {
      console.error('‚ö†Ô∏è ÁÑ°Ê≥ïÂ≠òÂèñÁõ∏Ê©ü:', err);
      alert('‚ùå Ë´ãÂÖÅË®±Áõ∏Ê©üÊ¨äÈôêÔºåÊàñ‰ΩøÁî®ÊîØÊè¥Áõ∏Ê©üÁöÑÁÄèË¶ΩÂô®ÔºÅ');
    }
  }

  adjustZoom(zoomValue: number) {
    if (this.stream) {
      const track = this.stream.getVideoTracks()[0];
      track
        .applyConstraints({
          advanced: [{ zoom: zoomValue }] as CustomMediaTrackConstraintSet[],
        })
        .then(() => console.log(`üîç Zoom set to ${zoomValue}`))
        .catch((err) => console.error('‚ùå Zoom adjustment failed', err));
    }
  }

  increaseZoom() {
    if (this.zoomLevel < this.maxZoom) {
      this.zoomLevel = Math.min(this.zoomLevel + this.zoomStep, this.maxZoom);
      this.adjustZoom(this.zoomLevel);
    }
  }

  decreaseZoom() {
    if (this.zoomLevel > this.minZoom) {
      this.zoomLevel = Math.max(this.zoomLevel - this.zoomStep, this.minZoom);
      this.adjustZoom(this.zoomLevel);
    }
  }
}
